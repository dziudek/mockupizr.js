{"version":3,"sources":["helper.js","tasks.js","validator.js","mockupizr.js"],"names":[],"mappings":"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","file":"mockupizr.js","sourcesContent":["class MockupizrHelper {\n    constructor() {\n\n    }\n\n    ucfirst(text) {\n        return text[0].toUpperCase() + text.slice(1);\n    }\n}","class MockupizrTasks {\n    constructor() {\n    }\n\n    static addClass(target, value) {\n        value = value.replace(/'/gim, '');\n        target.classList.add(value);\n    }\n\n    static removeClass(target, value) {\n        value = value.replace(/'/gim, '');\n        target.classList.remove(value);\n    }\n\n    static toggleClass(target, value) {\n        value = value.replace(/'/gim, '');\n        target.classList.toggle(value);\n    }\n}\n","class MockupizrValidator {\n    constructor() {\n\n    }\n\n    static isInSingleQuotes(text) {\n        return text[0] === \"'\" && text[text.length - 1] === \"'\";\n    }\n\n    static elementExist(selector) {\n        selector = selector.replace(/'/gim, '');\n        return document.querySelectorAll(selector).length > 0;\n    }\n}","/*\n\n    Currently understands:\n\n    data-m=\"add class 'x' to '#popup'\"\n    data-m=\"remove class 'x' from '#popup'\"\n\n */\n\nclass Mockupizr {\n    constructor() {\n        this.helper = new MockupizrHelper();\n        this.find();\n        this.iterate();\n    }\n\n\n    find() {\n        this.elements = document.querySelectorAll('*[data-m]');\n    }\n\n    iterate() {\n        for(let i = 0; i < this.elements.length; i++) {\n            this.parse(this.elements[i]);\n        }\n    }\n\n    parse(element) {\n        let command = element.dataset.m;\n        command = command.split(\" \");\n        this.understand(command, element);\n    }\n\n    understand(command, element) {\n        let action = command[0];\n        let property = command[1];\n        let value = command[2];\n        let target = command[4];\n\n        if (command.length != 5) {\n            throw new Error('Wrong command length: ' + command.length);\n        }\n\n        if (action !== 'add' && action !== 'remove' && action !== 'toggle') {\n            throw new Error('Wrong initial part of command');\n        }\n\n        if (property !== 'class') {\n            throw new Error('Wrong property: ' + property);\n        }\n\n        if (!MockupizrValidator.isInSingleQuotes(value)) {\n            throw new Error('Property value should be placed in single quotes: ' + value);\n        }\n\n        if (!MockupizrValidator.isInSingleQuotes(target)) {\n            throw new Error('Target selector should be placed in single quotes: ' + target);\n        }\n\n        if (!MockupizrValidator.elementExist(target)) {\n            throw new Error('There is no elements for the ' + target + ' selector');\n        }\n\n        this.doIt({\n            emmiter: element,\n            action: action,\n            target: target,\n            value: value,\n            property: property\n        });\n    }\n\n    doIt(data) {\n        let selector = data.target.replace(/'/gim, '');\n        let elements = document.querySelectorAll(selector);\n\n        data.emmiter.addEventListener('click', (e) => {\n            e.preventDefault();\n\n            for(let i = 0; i < elements.length; i++) {\n                let methodName = data.action + this.helper.ucfirst(data.property);\n                MockupizrTasks[methodName](elements[i], data.value);\n            }\n        }, false);\n    }\n}\n// Run\nnew Mockupizr();\n"],"sourceRoot":"/source/"}